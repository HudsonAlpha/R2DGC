text(0.1,0.515, "Optional: repeat alignment\nwith multiple seed files", cex=0.75)
text(0.1,0.515, "Optional: repeat\nalignment with\nmultiple seeds", cex=0.75)
plot.new()
rect(xleft = 0.25,ybottom = 0.9,xright = 0.75,ytop = 1, col="springgreen3")
text(0.5,0.95,"Read in sample files", cex=0.75)
arrows(x0 = 0.5,y0 = 0.9,x1 = 0.5,y1 = 0.875,length=0.05, lwd=2)
rect(0.25,0.775,0.75,0.875, col="wheat1")
text(0.5,0.825,"Compute retention indices", cex=0.75)
arrows(x0 = 0.5,y0 = 0.775,x1 = 0.5,y1 = 0.75,length=0.05, lwd=2)
rect(0.25,0.65,0.75,.75, col="indianred1")
text(0.5,0.7,"Compute pairwise sample-seed\npeak similarity scores", cex=0.75)
arrows(x0 = 0.5,y0 = 0.65,x1 = 0.5,y1 = 0.625,length=0.05, lwd=2)
rect(0.25,0.525,0.75,.625, col="khaki2")
text(0.5,0.575,"Optional: compute optimal\npeak similarity threshold", cex=0.75)
arrows(x0 = 0.5,y0 = 0.525,x1 = 0.5,y1 = 0.5,length=0.05, lwd=2)
rect(0.25,0.4,0.75,.5, col="steelblue2")
text(0.5,0.45,"Find best peak pairs above\npeak similarity threshold", cex=0.75)
arrows(x0 = 0.5,y0 = 0.4,x1 = 0.5,y1 = 0.375,length=0.05, lwd=2)
rect(0.25,0.275,0.75,.375, col="plum3")
text(0.5,0.325,"Optional: Relaxed threshold search\nfor high likelihood missing peaks", cex=0.75)
arrows(x0 = 0.5,y0 = 0.275,x1 = 0.5,y1 = 0.25,length=0.05, lwd=2)
rect(0.25,0.15,0.75,.25, col="lightgoldenrod")
text(0.5,0.2,"Optional: Identify aligned\npeaks with reference library", cex=0.75)
arrows(x0 = 0.5,y0 = 0.15,x1 = 0.5,y1 = 0.125,length=0.05, lwd=2)
arrows(x0 = 0.1,y0 = 0.325,x1 = 0.1,y1 = 0.7, lwd=2, code=0)
arrows(x0 = 0.25,y0 = 0.325,x1 = 0.1,y1 = 0.325, lwd=2, code=0)
arrows(x0 = 0.25,y0 = 0.7,x1 = 0.1,y1 = 0.7, lwd=2, length=0.05, code=1)
rect(0,0.45,0.2,0.575, col="coral")
text(0.1,0.515, "Optional: repeat\nalignment with\nmultiple seeds", cex=0.75)
rect(0,0,0.3,0.09, col="cadetblue2")
text(0.15,0.045,"Peak Alignment Table", cex=0.8)
rect(0.35,0.0,0.65,0.09, col="navajowhite")
text(0.5,0.045,"Peak Info Table", cex=0.8)
rect(0.7,0.0,1,0.09, col="pink2")
text(0.85,0.045,"Incongruent Quant\nMass List", cex=0.8)
text(0.5,.105, "Outputs", cex=0.8)
rect(0,0,1,0.09)
text(0.1,0.515, "Optional: repeat\nalignment with\nmultiple seeds", cex=0.72)
plot.new()
rect(xleft = 0.25,ybottom = 0.9,xright = 0.75,ytop = 1, col="springgreen3")
text(0.5,0.95,"Read in sample files", cex=0.75)
arrows(x0 = 0.5,y0 = 0.9,x1 = 0.5,y1 = 0.875,length=0.05, lwd=2)
rect(0.25,0.775,0.75,0.875, col="wheat1")
text(0.5,0.825,"Optional: Compute retention indices", cex=0.75)
arrows(x0 = 0.5,y0 = 0.775,x1 = 0.5,y1 = 0.75,length=0.05, lwd=2)
rect(0.25,0.65,0.75,.75, col="indianred1")
text(0.5,0.7,"Compute pairwise sample-seed\npeak similarity scores", cex=0.75)
arrows(x0 = 0.5,y0 = 0.65,x1 = 0.5,y1 = 0.625,length=0.05, lwd=2)
rect(0.25,0.525,0.75,.625, col="khaki2")
text(0.5,0.575,"Optional: compute optimal\npeak similarity threshold", cex=0.75)
arrows(x0 = 0.5,y0 = 0.525,x1 = 0.5,y1 = 0.5,length=0.05, lwd=2)
rect(0.25,0.4,0.75,.5, col="steelblue2")
text(0.5,0.45,"Find best peak pairs above\npeak similarity threshold", cex=0.75)
arrows(x0 = 0.5,y0 = 0.4,x1 = 0.5,y1 = 0.375,length=0.05, lwd=2)
rect(0.25,0.275,0.75,.375, col="plum3")
text(0.5,0.325,"Optional: Relaxed threshold search\nfor high likelihood missing peaks", cex=0.75)
arrows(x0 = 0.5,y0 = 0.275,x1 = 0.5,y1 = 0.25,length=0.05, lwd=2)
rect(0.25,0.15,0.75,.25, col="lightgoldenrod")
text(0.5,0.2,"Optional: Identify aligned\npeaks with reference library", cex=0.75)
arrows(x0 = 0.5,y0 = 0.15,x1 = 0.5,y1 = 0.125,length=0.05, lwd=2)
arrows(x0 = 0.1,y0 = 0.325,x1 = 0.1,y1 = 0.7, lwd=2, code=0)
arrows(x0 = 0.25,y0 = 0.325,x1 = 0.1,y1 = 0.325, lwd=2, code=0)
arrows(x0 = 0.25,y0 = 0.7,x1 = 0.1,y1 = 0.7, lwd=2, length=0.05, code=1)
rect(0,0.45,0.2,0.575, col="coral")
text(0.1,0.515, "Optional: repeat\nalignment with\nmultiple seeds", cex=0.7)
rect(0,0,0.3,0.09, col="cadetblue2")
text(0.15,0.045,"Peak Alignment Table", cex=0.8)
rect(0.35,0.0,0.65,0.09, col="navajowhite")
text(0.5,0.045,"Peak Info Table", cex=0.8)
rect(0.7,0.0,1,0.09, col="pink2")
text(0.85,0.045,"Incongruent Quant\nMass List", cex=0.8)
text(0.5,.105, "Outputs", cex=0.8)
rect(0,0,1,0.09)
plot.new()
rect(xleft = 0.25,ybottom = 0.9,xright = 0.75,ytop = 1, col="springgreen3")
text(0.5,0.95,"Read in sample files", cex=0.75)
arrows(x0 = 0.5,y0 = 0.9,x1 = 0.5,y1 = 0.875,length=0.05, lwd=2)
rect(0.25,0.775,0.75,0.875, col="wheat1")
text(0.5,0.825,"Optional: Compute retention indices", cex=0.75)
arrows(x0 = 0.5,y0 = 0.775,x1 = 0.5,y1 = 0.75,length=0.05, lwd=2)
rect(0.25,0.65,0.75,.75, col="indianred1")
text(0.5,0.7,"Compute pairwise sample-seed\npeak similarity scores", cex=0.75)
arrows(x0 = 0.5,y0 = 0.65,x1 = 0.5,y1 = 0.625,length=0.05, lwd=2)
rect(0.25,0.525,0.75,.625, col="khaki2")
text(0.5,0.575,"Optional: compute optimal\npeak similarity threshold", cex=0.75)
arrows(x0 = 0.5,y0 = 0.525,x1 = 0.5,y1 = 0.5,length=0.05, lwd=2)
rect(0.25,0.4,0.75,.5, col="steelblue2")
text(0.5,0.45,"Find best peak pairs above\npeak similarity threshold", cex=0.75)
arrows(x0 = 0.5,y0 = 0.4,x1 = 0.5,y1 = 0.375,length=0.05, lwd=2)
rect(0.25,0.275,0.75,.375, col="plum3")
text(0.5,0.325,"Optional: Relaxed threshold search\nfor high likelihood missing peaks", cex=0.75)
arrows(x0 = 0.5,y0 = 0.275,x1 = 0.5,y1 = 0.25,length=0.05, lwd=2)
rect(0.25,0.15,0.75,.25, col="lightgoldenrod")
text(0.5,0.2,"Optional: Identify aligned\npeaks with reference library", cex=0.75)
arrows(x0 = 0.5,y0 = 0.15,x1 = 0.5,y1 = 0.125,length=0.05, lwd=2)
arrows(x0 = 0.1,y0 = 0.325,x1 = 0.1,y1 = 0.7, lwd=2, code=0)
arrows(x0 = 0.25,y0 = 0.325,x1 = 0.1,y1 = 0.325, lwd=2, code=0)
arrows(x0 = 0.25,y0 = 0.7,x1 = 0.1,y1 = 0.7, lwd=2, length=0.05, code=1)
rect(0,0.45,0.2,0.575, col="coral")
text(0.1,0.515, "Optional: repeat\nalignment with\nmultiple seeds", cex=0.7)
rect(0,0,0.3,0.09, col="cadetblue2")
text(0.15,0.045,"Peak Alignment Table", cex=0.8)
rect(0.35,0.0,0.65,0.09, col="navajowhite")
text(0.5,0.045,"Peak Info Table", cex=0.8)
rect(0.7,0.0,1,0.09, col="pink2")
text(0.85,0.045,"Incongruent Quant\nMass List", cex=0.8)
text(0.5,.105, "Outputs", cex=0.8)
rect(0,0,1,0.09)
text(0.5,-0.02, "Figure 9")
text(0.5,-0.02, "Figure 9. Overview of ConsensusAlign function.", cex=0.7)
Alignment<-ConsensusAlign(c(SampleA,SampleB), standardLibrary = StandardLibrary, commonIons = ProblemIons)
head(Alignment$AlignmentMatrix)
str(Alignment$AlignmentMatrix)
head(Alignment$AlignmentMatrix)
head(Alignment$AlignmentMatrix, n=3)
Alignment$AlignmentMatrix
head(Alignment$MetaboliteInfo, n=3)
str(Alignment$MetaboliteInfo, n=3)
str(Alignment$MetaboliteInfo)
str(Alignment$MetaboliteInfo,nchar.max=20)
str(Alignment$MetaboliteInfo,nchar.max=15)
str(Alignment$MetaboliteInfo,nchar.max=10)
str(Alignment$AlignmentMatrix)
Alignment$UnmatchedQuantMasses
library(R2DGC)
SampleC<-system.file("extdata", "SampleC.txt", package="R2DGC")
CompressionInfo<-PrecompressFiles(inputFileList=SampleC)
str(CompressionInfo)
str(CompressionInfo, nchar.max=10)
paste0(c(SampleA,SampleB,SampleC),"_Processed.txt")
library(R2DGC)
library(R2DGC)
library(R2DGC)
library(R2DGC)
data("StandardLibrary_030117")
library(R2DGC)
data("StandardLibrary_030117")
str(StandardLibrary_030117)
str(StandardLibrary_030117, nchar.max=10)
library(R2DGC)
library(R2DGC)
data("StandardLibrary_030117")
library(R2DGC)
library(R2DGC)
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(AA_Results[1,1],AA_Results[1,2],AA_Results[2,1],AA_Results[2,2],AA_Results[3,1],AA_Results[3,2])
barplot(c(AA_Results[1,1],AA_Results[1,2],AA_Results[2,1],AA_Results[2,2],AA_Results[3,1],AA_Results[3,2]))
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]))
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)))
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)), names=c("Successful", "Incorrect", "Missing"))
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)),xaxt="n", ylab = "Count")
axis(1, labels=c("Successful", "Incorrect", "Missing"), at = c(2, 4, 6))
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)),xaxt="n", ylab = "Count")
axis(1, labels=c("Successful", "Incorrect", "Missing"), at = c(2, 4, 6))
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)),xaxt="n", ylab = "Count")
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)), names=c("Successful","", "Incorrect","", "Missing"), ylab = "Count")
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)), names=c("Successful","", "Incorrect","", "Missing",""), ylab = "Count")
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)), names=c("      Successful","", "      Incorrect","", "       Missing",""), ylab = "Count")
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)), names=c("            Successful","", "            Incorrect","", "              Missing",""), ylab = "Count")
legend("topright", legend("Guineu", "R2DGC"),col=c("blue","red"), pch=15)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)), names=c("              Successful","", "               Incorrect","", "              Missing",""), ylab = "Count")
legend("topright", legend("Guineu", "R2DGC"),col=c("blue","red"), pch=15)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[1,2],AA_Results[2,2],AA_Results[1,3],AA_Results[1,3]), space=rep(c(2,0),3), col=c(rep(c("blue","red"),3)), names=c("              Successful","", "               Incorrect","", "              Missing",""), ylab = "Count")
legend("topright", legend=c("Guineu", "R2DGC"),col=c("blue","red"), pch=15)
IDs<-read.table("~/Downloads/Consensus_seedRawFile.txt",sep="\t",stringsAsFactors = F)
MetabScores<-list()
for(Metab in gsub("_-.+$","",IDs[1,1:20])){
print(Metab)
currentMetabScore<-c()
Locs<-apply(IDs[,1:20],1,function(x) grep(Metab,x)[1])
for(i in 1:length(Locs)){
currentMetabScore[i]<-gsub("^.+_","",IDs[i,Locs[i]])
}
MetabScores[[Metab]]<-currentMetabScore
}
MetabFrame<-matrix(unlist(MetabScores),nrow=31)
MetabFrame[which(as.numeric(MetabFrame)<(-100))]<- (-100)
row.names(MetabFrame)<-IDs[,21]
cols<-rainbow(31)
plot(1:10,MetabFrame[2,c(1:4,6,7,11,13,18,19)],ylim=c(-100,100),type="o",pch=16, cex=0.5,col=cols[2],xaxt="n",xlab="",ylab="MatchScore",xlim=c(1,12))
for(i in c(2,4,5,6,10,11,14,17,23,26)){
points(1:10,MetabFrame[i,c(1:4,6,7,11,13,18,19)],type="o",pch=16, cex=0.5,col=cols[i])
}
CellLine<-read.table("~/Downloads/CellLineResults.txt",sep="\t",header=T)
barplot(CellLine[,1])
barplot(CellLine[,1],space = c(0,0,0,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),rep("red",19)))
barplot(CellLine[,1],space = c(0,0,0,2,rep(0,17)), ylim=c(0,300), col=c(rep("blue",3),rep("red",19)))
barplot(CellLine[,1],space = c(0,0,0,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),rep("red",18)))
barplot(CellLine[,1],space = c(0,0,0,2,rep(0,17)), ylim=c(0,300), col=c(rep("blue",3),rep("red",18)))
CellLine[,1]
barplot(CellLine[1:22,1],space = c(0,0,0,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),rep("red",18)))
barplot(CellLine[1:22,1],space = c(0,0,0,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),rep("red",19)))
barplot(CellLine[1:22,1],space = c(0,0,0,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),rep("red",19)), names=c("Relaxed","Medium","Stringent", seq(0,90,5)))
barplot(CellLine[1:22,1],space = c(0,0,0,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),rep("red",19)), names=c("Relaxed","Medium","Stringent", seq(0,90,5)), las=2)
barplot(CellLine[1:22,1],space = c(0,0,0,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),rep("red",19)), names=c("Relaxed","Medium","Stringent", seq(0,90,5)), las=2, main="Successful Matches", ylab="Count")
abline(h=CellLine[23,1],lty=2, col="darkgreen",lwd=2)
barplot(CellLine[1:22,2],space = c(0,0,0,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),rep("red",19)), names=c("Relaxed","Medium","Stringent", seq(0,90,5)), las=2, main="Incorrect Matches", ylab="Count")
barplot(CellLine[1:22,2],space = c(0,0,0,2,rep(0,18)), col=c(rep("blue",3),rep("red",19)), names=c("Relaxed","Medium","Stringent", seq(0,90,5)), las=2, main="Incorrect Matches", ylab="Count")
barplot(CellLine[1:22,3],space = c(0,0,0,2,rep(0,18)), col=c(rep("blue",3),rep("red",19)), names=c("Relaxed","Medium","Stringent", seq(0,90,5)), las=2, main="Missing Matches", ylab="Count")
barplot(CellLine[1:22,4],space = c(0,0,0,2,rep(0,18)), col=c(rep("blue",3),rep("red",19)), names=c("Relaxed","Medium","Stringent", seq(0,90,5)), las=2, main="Total number of peaks aligned", ylab="Count")
library(R2DGC)
ProblemIons<-FindProblemIons(inputFile=system.file("extdata", "SampleA.txt",
package="R2DGC"), possibleIons = 70:78)
library("R2DGC", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ProblemIons<-FindProblemIons(inputFile=system.file("extdata", "SampleA.txt",
package="R2DGC"), possibleIons = 70:78)
library(R2DGC)
ProblemIons<-FindProblemIons(inputFile=system.file("extdata", "SampleA.txt",
package="R2DGC"), possibleIons = 70:78)
ProblemIons<-FindProblemIons(inputFile=system.file("extdata", "SampleA.txt",
package="R2DGC"))
ProblemIons<-FindProblemIons(inputFile=system.file("extdata", "SampleA.txt",
package="R2DGC"))
plot.new()
points(c(.1,.35,.3,.5),rep(0.8,4), pch=16, col=c("black","red","black","black"))
text(c(.1,.35,.3,.5),c(0.85,.75,.85,0.85), labels = c("Std1","","Std2","Std3"), cex=0.8)
rect(xleft = 0.05,ybottom = 0.75,xright = 1.03,ytop = 0.88)
text(0.3,0.9,"Column1")
points(c(.2,.4,.6),rep(0.6,3), pch=16, col=c("black","black","black"))
text(c(.2,.4,.6),rep(0.65,5), labels = c("Std1","Std2","Std3"),cex=0.8)
rect(xleft = 0.05,ybottom = 0.55,xright = 1.03,ytop = 0.68)
text(0.4,0.7,"Column2")
points(c(.1,.5,1),rep(0.4,3), pch=16, col=c("black","black","black"))
text(c(.1,.5,0.99),rep(0.45,5), labels = c("Std1","Std2","Std3"),cex=0.8)
rect(xleft = 0.05,ybottom = 0.35,xright = 1.03,ytop = 0.48)
text(0.55,0.5,"Column3")
arrows(x0 = 0, y0 = 0.3,x1 = 1,y1 = 0.3, code=0, lwd=3)
arrows(x0 = c(0,0.2,0.4,0.6,0.8,1), y0 = rep(0.3,6),x1 = c(0,0.2,0.4,0.6,0.8,1),y1 = rep(0.25,6), code=0, lwd=3)
text(c(0,0.2,0.4,0.6,0.8,1),rep(0.22,6), labels = c(seq(0,10,2)))
text(0.5,0.32, labels = "Retention Time",cex=0.75)
SampleC<-system.file("extdata", "SampleC.txt", package="R2DGC")
CompressionInfo<-PrecompressFiles(inputFileList=SampleC)
str(CompressionInfo, nchar.max=10)
CompressionInfo<-PrecompressFiles(inputFileList=SampleC, commonIons = ProblemIons[,1])
CompressionInfo<-PrecompressFiles(inputFileList=SampleC, commonIons = ProblemIons[,1])
Standard1<-system.file("extdata", "Alanine_150226_1.txt", package="R2DGC")
Standard2<-system.file("extdata", "Serine_022715_1.txt", package="R2DGC")
StandardLibrary<-MakeReference(inputFileList = c(Standard1, Standard2),
RT1_Standards=paste0("FAME_", seq(8,24,2)))
str(StandardLibrary, nchar.max=10)
data("StandardLibrary_030117")
str(StandardLibrary_030117, nchar.max=10, vec.len = 2)
SampleA<-system.file("extdata", "SampleA.txt", package="R2DGC")
SampleB<-system.file("extdata", "SampleB.txt", package="R2DGC")
Alignment<-ConsensusAlign(c(SampleA,SampleB), standardLibrary = StandardLibrary,
commonIons = ProblemIons)
colnames(Alignment$Alignment_Matrix)<-gsub("^.+/","",colnames(Alignment$Alignment_Matrix))
head(Alignment$Alignment_Matrix, n=3)
str(Alignment$Peak_Info,nchar.max=10, vec.len = 2)
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
View(AA_Results)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2]AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
legend("top", legend=c("Guineu", "mSPA","R2DGC"),col=c("blue","red","green"), pch=15)
CellLine<-read.table("~/Downloads/CellLineResults.txt",sep="\t",header=T)
barplot(CellLine[1:23,1],space = c(0,0,0,2,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),"red",rep("green",19)), names=c("Relaxed","Medium","Stringent", seq(0,90,5)), las=2, main="Successful Matches", ylab="Count", cex.names=0.75)
barplot(CellLine[1:23,1],space = c(0,0,0,2,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),"red",rep("green",19)), names=c("Relaxed","Medium","Stringent", "mSPA", seq(0,90,5)), las=2, main="Successful Matches", ylab="Count", cex.names=0.75)
abline(h=CellLine[24,1],lty=2, col="darkgreen",lwd=2)
barplot(CellLine[1:23,1],space = c(0,0,0,2,2,rep(0,18)), ylim=c(0,300), col=c(rep("blue",3),"red",rep("green",19)), names=c("Relaxed","Medium","Stringent", "mSPA", seq(0,90,5)), las=2, main="Successful Matches", ylab="Count", cex.names=0.75)
FAME_Standards<-c(1,2,3,5)
Total_Standard_Length<-(max(FAME_Standards)-min(FAME_Standards))
Analyte1_RT<-3.5
Analyte1_RetentionIndex<- (FAME_Standards-Analyte1_RT)/Total_Standard_Length
#Compute retention index for all possible analyte 2s
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards-Analyte2_RT)/Total_Standard_Length
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
FAME_Standards2<-c(2,3,4,6)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
FAME_Standards2<-c(1,2.5,5,10)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
FAME_Standards<-c(1,2,3,4,5)
Total_Standard_Length<-(max(FAME_Standards)-min(FAME_Standards))
Analyte1_RT<-3.5
Analyte1_RetentionIndex<- (FAME_Standards-Analyte1_RT)/Total_Standard_Length
#Compute retention index for all possible analyte 2s
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards-Analyte2_RT)/Total_Standard_Length
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
FAME_Standards2<-c(2,3,4,5,6)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
FAME_Standards2<-c(1,2.5,5,7,10)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
par(mfrow=c(1,3))
FAME_Standards<-c(1,2,3,4,5)
Total_Standard_Length<-(max(FAME_Standards)-min(FAME_Standards))
Analyte1_RT<-3.5
Analyte1_RetentionIndex<- (FAME_Standards-Analyte1_RT)/Total_Standard_Length
#Compute retention index for all possible analyte 2s
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards-Analyte2_RT)/Total_Standard_Length
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
#Compute retention index for analyte 2
FAME_Standards2<-c(2,3,4,5,6)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
#Compute retention index for analyte 2
FAME_Standards2<-c(1,2.5,5,7,10)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
par(mfrow=c(1,3))
FAME_Standards<-c(1,2,3,4,5)
Total_Standard_Length<-(max(FAME_Standards)-min(FAME_Standards))
Analyte1_RT<-3.5
Analyte1_RetentionIndex<- (FAME_Standards-Analyte1_RT)/Total_Standard_Length
#Compute retention index for all possible analyte 2s
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards-Analyte2_RT)/Total_Standard_Length
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex), ylim=c(0,3.5))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
#Compute retention index for analyte 2
FAME_Standards2<-c(2,3,4,5,6)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex), ylim=c(0,3.5))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
#Compute retention index for analyte 2
FAME_Standards2<-c(1,2.5,5,7,10)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex), ylim=c(0,3.5))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)")
par(mfrow=c(1,3))
FAME_Standards<-c(1,2,3,4,5)
Total_Standard_Length<-(max(FAME_Standards)-min(FAME_Standards))
Analyte1_RT<-3.5
Analyte1_RetentionIndex<- (FAME_Standards-Analyte1_RT)/Total_Standard_Length
#Compute retention index for all possible analyte 2s
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards-Analyte2_RT)/Total_Standard_Length
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)", ylim=c(0,3.5))
#Compute retention index for analyte 2
FAME_Standards2<-c(2,3,4,5,6)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)", ylim=c(0,3.5))
#Compute retention index for analyte 2
FAME_Standards2<-c(1,2.5,5,7,10)
Total_Standard_Length2<-(max(FAME_Standards2)-min(FAME_Standards2))
IndexDifferences<-c()
for(Analyte2_RT in seq(0,10,0.1)){
Analyte2_RetentionIndex<- (FAME_Standards2-Analyte2_RT)/Total_Standard_Length2
IndexDifferences[as.character(Analyte2_RT)]<-sum(abs(Analyte2_RetentionIndex
-Analyte1_RetentionIndex))
}
plot(seq(0,10,0.1),IndexDifferences, pch=16, xlab="Analyte 2 Retention Time",
ylab="Retention Index Difference (W)", ylim=c(0,3.5))
library(R2DGC)
SampleA<-system.file("extdata", "SampleA.txt", package="R2DGC")
SampleB<-system.file("extdata", "SampleB.txt", package="R2DGC")
Alignment<-ConsensusAlign(inputFileList = c(SampleA,SampleB),
RT1_Standards = c(), numCores = 4)
SampleA<-system.file("extdata", "SampleA.txt", package="R2DGC")
SampleB<-system.file("extdata", "SampleB.txt", package="R2DGC")
Alignment<-ConsensusAlign(inputFileList = c(SampleA,SampleB),
RT1_Standards = paste("FAME_", seq(8,24,2)),
numCores = 4, plotMatchStringencyOptimization = FALSE)
Alignment<-ConsensusAlign(inputFileList = c(SampleA,SampleB),
RT1_Standards = paste("FAME_", seq(8,24,2)),
numCores = 4)
Alignment<-ConsensusAlign(inputFileList = c(SampleA,SampleB),
RT1_Standards = paste0("FAME_", seq(8,24,2)),
numCores = 4)
Alignment<-ConsensusAlign(inputFileList = c(SampleA,SampleB),
RT1_Standards = paste0("FAME_", seq(8,24,2)),
numCores = 4, plotMatchStringencyOptimization = TRUE)
library(R2DGC)
Alignment<-ConsensusAlign(inputFileList = c(SampleA,SampleB),
RT1_Standards = paste0("FAME_", seq(8,24,2)),
numCores = 4, plotMatchStringencyOptimization = TRUE)
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
axis(1, at=c(3.5,78.5,12.5), labels=c("Success","Incorrect","Missing"))
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
axis(1, at=c(3.5,78.5,12.5), labels=c("Success","Incorrect","Missing"))
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
axis(1, at=c(3.5,78.5,12.5), labels=c("Success","Incorrect","Missing"))
legend("top", legend=c("Guineu", "mSPA","R2DGC"),col=c("blue","red","green"), pch=15)
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
axis(1, at=c(3.5,8.5,12.5), labels=c("Success","Incorrect","Missing"))
legend("top", legend=c("Guineu", "mSPA","R2DGC"),col=c("blue","red","green"), pch=15)
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
axis(1, at=c(3.5,8.5,13.5), labels=c("Success","Incorrect","Missing"))
legend("top", legend=c("Guineu", "mSPA","R2DGC"),col=c("blue","red","green"), pch=15)
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count")
axis(1, at=c(3.5,8.5,13.5), labels=c("Successful","Incorrect","Missing"), xlab="Alignment Type")
legend("top", legend=c("Guineu", "mSPA","R2DGC"),col=c("blue","red","green"), pch=15)
AA_Results<-read.table("~/Downloads/AA_Results.txt",sep="\t",header=T)
barplot(c(AA_Results[1,1],AA_Results[2,1],AA_Results[3,1],AA_Results[1,2],AA_Results[2,2],AA_Results[3,2],AA_Results[1,3],AA_Results[2,3],AA_Results[3,3]), space=rep(c(2,0,0),3), col=c(rep(c("blue","red","green"),3)), xaxt="n", ylab = "Count", xlab="Alignment Type")
axis(1, at=c(3.5,8.5,13.5), labels=c("Successful","Incorrect","Missing"))
legend("top", legend=c("Guineu", "mSPA","R2DGC"),col=c("blue","red","green"), pch=15)
par(mai=c(0.1,0.1,0,0.1))
plot.new()
text(0.5,1,"Input Sample\nChromatof File Paths", cex=0.8)
arrows(0.5,0.96,0.5,0.905,length=0.1, lwd=2)
rect(0.3,0.75,0.7,0.9, col="springgreen3")
text(0.5,0.83,"Optional: Ion Filtering\n(FindProblemIons)", cex=0.8)
arrows(0.5,0.745,0.5,0.705,length=0.1, lwd=2)
rect(0.3,0.55,0.7,0.7, col="steelblue2")
text(0.5,0.63,"Optional: Intra-Sample\nPeak Compression\n(PrecompressFiles)", cex=0.8)
arrows(0.5,0.545,0.5,0.505,length=0.1, lwd=2)
rect(0.3,0.3,0.7,0.5, col="indianred1")
text(0.5,0.4,"Multi-Sample Peak\nAlignment and\nMetabolite Identification\n(ConsensusAlign)", cex=0.8)
rect(0.8,0.5,1,0.65, col="plum3")
text(0.9,0.58,"Standard Library\nCreation\n(MakeReference)", cex=0.69)
text(0.9,0.77,"Input Metabolite\nStandard\nChromatof File Paths", cex=0.8)
arrows(0.9,0.71,0.9,0.655,length=0.1, lwd=2)
arrows(0.9,0.495,0.705,0.4,length=0.1, lwd=2)
arrows(0.5,0.295,0.5,0.255,length=0.1, lwd=2)
rect(-0.02,0.03,1.02,0.25,col="snow2")
text(0.5,0.225,"Output List")
rect(0,0.05,0.3,0.2, col="wheat1")
text(0.15,0.13,"Peak Alignment Table", cex=0.8)
rect(0.35,0.05,0.65,0.2, col="khaki2")
text(0.5,0.13,"Peak Info Table", cex=0.8)
rect(0.7,0.05,1,0.2, col="lightgoldenrod")
text(0.85,0.13,"Incongruent Quant\nMass List", cex=0.8)
